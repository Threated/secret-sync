version: "3"

services:
  local:
    build:
      context: ../
      dockerfile: Dockerfile.local
    image: samply/secret-sync-local:latest
    environment:
      - PROXY_ID=proxy1.broker
      - OIDC_PROVIDER=app2.proxy2.broker
      - BROKER_URL=http://broker:8080
      - SECRET_DEFINITIONS=${ARGS}
    volumes:
      # Path can be configuard via CACHE_PATH this container path is the default
      - ${CACHE_PATH:-/tmp/asdf}:/usr/local/cache
    extra_hosts:
      - "broker:${BROKER_IP}"
    secrets:
      - privkey.pem
      - root.crt.pem

  central:
    build:
      context: ../
      dockerfile: Dockerfile.central
    image: samply/secret-sync-central:latest
    depends_on:
      - worker
      - server
    environment:
      - BEAM_URL=http://proxy:8082
      - BEAM_ID=app2.proxy2.broker
      - BEAM_SECRET=App1Secret
      - AUTHENTIK_URL=http://authentik:9000
      - AUTHENTIK_ID=admin
      - AUTHENTIK_SECRET=admin
      - AUTHENTIK_SERVICE_ACCOUNT_ROLES=query-users
    extra_hosts:
      - "proxy:${PROXY_IP}"

  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    ports:
      - "${COMPOSE_PORT_HTTP:-9000}:9000"
      - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2024.12}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis

secrets:
  privkey.pem:
    file: ${BEAM_DIR}/dev/pki/proxy1.priv.pem
  root.crt.pem:
    file: ${BEAM_DIR}/dev/pki/root.crt.pem

volumes:
  database:
    driver: local
  redis:
    driver: local
